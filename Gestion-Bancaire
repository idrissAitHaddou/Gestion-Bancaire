#include <stdio.h>
#include <stdlib.h>
#include <string.h>
///*** DECLARATION DES VARIABLES ***
typedef struct { char* cin[10]; char* nomPrenom[50]; float montant; }Compte;
Compte *cm;
int taille_Compte=0, nombre_de_appel_fidelisaton=0, votre_operation=0; float votre_motant=0;
char* max1_cin[10],max2_cin[10],max3_cin[10];
///*** TOUT LES FONCTIONS ***
void ajouter_Compte();
void menu();
void afficher_Comptes(int validate_order);
void retrait_et_Depot(char* cin[10],float montant_Client,int type_action);
int  recherche(char* cin);
void Par_Ordre_Ascendant_Ascendant(int type_order);
void fidelisaton();
///*** MAIN ***
int main()
{
    cm =(Compte*)malloc(sizeof(Compte));
    menu();
    return 0;
}
///*** MENU ***
void menu()
{
       if(taille_Compte>3){ fidelisaton(); }
       int ch,nC;
       char cin_Client[10];
       float montant_Client;
       printf("\n ------------------------------------------- MENU ----------------------------------------------------- \n\n");
       printf(" 1  : Introduire un compte bancaire (CIN, Nom et Prénom, Montant) \n");
       printf(" 2  : Introduire plusieurs comptes bancaires (CIN, Nom et Prénom, Montant) \n");
       printf(" 3  : Operations \n");
       printf(" 4  : Affichage \n");
       printf(" 5  : recherch \n");
       printf(" 6  : quitter le programme \n");
       printf("\n ------------------------------------------------------------------------------------------------------ \n\n");
       printf("\n taper votre choix : ");
       scanf("%d",&ch);
       switch(ch)
       {
           case 1 : ajouter_Compte(1);break;
           case 2 :
               printf("\n taper le nombre des comptes que vous voullez introduire : ");
               scanf("%d",&nC);
               ajouter_Compte(nC);break;
           case 3 :
                     printf(" 1  : Retrait \n");
                     printf(" 2  : Depot \n");
                     printf("\ntaper votre choix : ");
                     scanf("%d",&votre_operation);
                     if(votre_operation == 1){
                           printf("\n taper votre CIN : ");
                           scanf("%s",cin_Client);
                           printf(" taper votre MONTANT : ");
                           scanf("%f",&montant_Client);
                           retrait_et_Depot(cin_Client,montant_Client,1);
                     }
                     else if(votre_operation == 2){
                          printf("\n taper votre CIN : ");
                          scanf("%s",cin_Client);
                          printf(" taper votre MONTANT : ");
                          scanf("%f",&montant_Client);
                          retrait_et_Depot(cin_Client,montant_Client,2);
                     }
                     system("cls");
                     menu();
             case 4 :
                   printf(" 1  : Par Ordre Ascendant \n");
                   printf(" 2  : Par Ordre Descendant \n");
                   printf(" 3  : Par Ordre Ascendant (les comptes bancaire ayant un montant supérieur à un chiffre introduit \n");
                   printf(" 4  : Par Ordre Descendant (les comptes bancaire ayant un montant supérieur à un chiffre introduit) \n");
                   printf("\ntaper votre choix : ");
                   scanf("%d",&votre_operation);
                   if(votre_operation==1)     {  Par_Ordre_Ascendant_Descendant(1) ;break;}
                   else if(votre_operation==2){  Par_Ordre_Ascendant_Descendant(2) ;break;}
                   else if(votre_operation==3){
                           printf("\n taper un montant : ");
                           scanf("%f",&votre_motant);
                           Par_Ordre_Ascendant_Descendant(3);break;}
                   else if(votre_operation==4){
                           printf("\n taper un montant : ");
                           scanf("%f",&votre_motant);
                           Par_Ordre_Ascendant_Descendant(4);break;
                   }
                   system("cls");
                   menu();
           case 5 :
                printf("\n taper votre CIN : ");
                scanf("%s",cin_Client);
                int validate_cin=recherche(cin_Client);
                if(validate_cin!=0)
                {
                    system("cls");
                    printf("\n------------- LES RESULTAT DE RECHERCHE ------------- \n\n");
                    printf("\n=> %s , cin : %s , solde = %.2f \n",cm[validate_cin-1].nomPrenom,cm[validate_cin-1].cin,cm[validate_cin-1].montant);
                }
                else{system("cls");}
                menu();
           case 6 :exit(0);break;
           default : menu();break;
       }
}
///*** FONCTION POUR  AJOUTER DES COMPTES ***
void ajouter_Compte(int crt)
{   int taille=taille_Compte;
    char* cin[10];
    cm=realloc(cm,(taille_Compte+crt)*sizeof(Compte));
    for(int i=taille_Compte;i<taille_Compte+crt;i++)
    {
         printf("\n taper votre cin : ");
         scanf("%s",cin);
         int v=recherche(cin);
          if(taille_Compte==0)
         {
             strcpy(cm[i].cin,cin);
             printf(" taper votre nom et prenom : ");
             getchar();
             gets(cm[i].nomPrenom);
             printf(" taper votre montant : ");
             scanf("%f",&cm[i].montant);
             taille++;
         }
         else if(v==0)
         {
             strcpy(cm[i].cin,cin);
             printf(" taper votre nom et prenom : ");
             scanf("%s",cm[i].nomPrenom);
             printf(" taper votre montant : ");
             scanf("%f",&cm[i].montant);
             taille++;
         }
         else
         {
             system("cls");
             printf(" votre cin incorrecte !!!!!!!! \n");
             menu();
         }
    }
    taille_Compte=taille;
    system("cls");menu();
}
///***** FONCTION POUR  AFFICHAGE DES COMPTES *****
void afficher_Comptes(int validate_order)
{
    system("cls");
    printf("\n------------- TOUT LES COPMTES ------------- \n\n");
    for(int i=0;i<taille_Compte;i++)
    {
        if(validate_order == 1)
        {
             printf(" => %s , cin : %s , solde = %.2f \n",cm[i].nomPrenom,cm[i].cin,cm[i].montant);
        }
        else if(validate_order == 3)
        {
            if(cm[i].montant>votre_motant)
            {
                 printf(" => %s , cin : %s , solde = %.2f \n",cm[i].nomPrenom,cm[i].cin,cm[i].montant);
            }
        }
    }
   menu();
}
///***** FONCTION POUR  RECHERCHE UNE CIN *****
int  recherche(char cinR[10])
{
    int vl=0;
    for(int i=0;i<taille_Compte;i++){ if(strcmp(cm[i].cin,cinR)==0){vl=i+1;} }
    return vl;
}
///***** FONCTION POUR  RETRAIT ET DEPOT *****
void  retrait_et_Depot(char* cin[10],float montant_Client,int type_action)
{
        int validate=recherche(cin);
        if(validate!=0)
        {
            if(type_action==1)
            {
                if(montant_Client>cm[validate-1].montant){
                    system("cls");
                    printf(" votre montant incorrecte !!!!!!!");
                    menu();
                }
                else{  cm[validate-1].montant=cm[validate-1].montant-montant_Client; }
            }
            else if(type_action==2)
            {
                 cm[validate-1].montant=cm[validate-1].montant+montant_Client;
            }
        }
        else
        {
            system("cls");
            printf(" votre cin incorrecte !!!!!!!");
            menu();
        }
        system("cls");menu();
}
///****** FONCTION POUR Par Ordre Ascendant ET Ascendant ******
void  Par_Ordre_Ascendant_Descendant(int type_order)
{
         float mont;
         for(int i=0;i<taille_Compte;i++)
         {
             if(cm == NULL){system("cls");menu();break;}
             for(int j=i+1;j<taille_Compte;j++)
             {
                 if(type_order==1 || type_order==3)
                 {
                     if(cm[i].montant>cm[j].montant)
                     {
                         Compte ct;
                         ct=cm[i];
                         cm[i]=cm[j];
                         cm[j]=ct;
                     }
                 }
                 else if(type_order==2 || type_order==4)
                 {
                     if(cm[i].montant<cm[j].montant)
                     {
                         Compte ct;
                         ct=cm[i];
                         cm[i]=cm[j];
                         cm[j]=ct;
                     }
                 }
             }
         }
         if(type_order==3){afficher_Comptes(3);}
         else  if(type_order==4){afficher_Comptes(3);}
         else {afficher_Comptes(1);}
}
///****** FIDELISATON *******
void fidelisaton()
{      nombre_de_appel_fidelisaton++;
       float mont;
       for(int i=0;i<taille_Compte;i++)
         {
             for(int j=i+1;j<taille_Compte;j++)
             {
               if(cm[i].montant<cm[j].montant)
                 {
                     Compte ct;
                     ct=cm[i];
                     cm[i]=cm[j];
                     cm[j]=ct;
                 }
             }
         }
         if(nombre_de_appel_fidelisaton>1)
         {
             if(strcmp(cm[0].cin,max1_cin)!=0){cm[0].montant=cm[0].montant+(1.3*cm[0].montant)/100; strcpy( max1_cin,cm[0].cin ); }
             if(strcmp(cm[1].cin,max2_cin)!=0){cm[1].montant=cm[1].montant+(1.3*cm[1].montant)/100; strcpy( max2_cin,cm[1].cin );}
             if(strcmp(cm[2].cin,max3_cin)!=0){cm[2].montant=cm[2].montant+(1.3*cm[2].montant)/100; strcpy( max3_cin,cm[2].cin );}
         }
         else
         {
            strcpy( max1_cin,cm[0].cin );  strcpy( max2_cin,cm[1].cin );   strcpy( max3_cin,cm[2].cin );
            for(int i=0;i<3;i++){ cm[i].montant=cm[i].montant+(1.3*cm[i].montant)/100; }
         }
}
